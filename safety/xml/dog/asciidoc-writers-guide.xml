<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>AsciiDoc Writer&#8217;s Guide</title>
<date>2020-04-13</date>
<authorgroup>
<author>
<personname>
<firstname>Dan</firstname>
<surname>Allen</surname>
</personname>
<email>https://github.com/mojavelinux[@mojavelinux]</email>
</author>
<author>
<personname>
<firstname>Sarah</firstname>
<surname>White</surname>
</personname>
<email>https://github.com/graphitefriction[@graphitefriction]</email>
</author>
</authorgroup>
</info>
<simpara>This guide provides a gentle introduction to AsciiDoc, a <emphasis>plain text</emphasis> documentation <emphasis role="strong">syntax</emphasis> and <emphasis role="strong">processor</emphasis>.
This introduction is intended for anyone who wants to reduce the effort required to write and publish content, whether for technical documentation, articles, web pages or good ol'-fashioned prose.</simpara>
<tip>
<simpara>If you want to know what AsciiDoc is all about, find the answer in <link xl:href="https://asciidoctor.org/docs/what-is-asciidoc-why-use-it">What is AsciiDoc?</link>.
If you&#8217;re looking for a concise survey of the AsciiDoc syntax, consult the <link xl:href="https://asciidoctor.org/docs/asciidoc-syntax-quick-reference/">AsciiDoc Syntax Quick Reference</link>.</simpara>
</tip>
<simpara>In this guide, you&#8217;ll learn:</simpara>
<itemizedlist>
<listitem>
<simpara>The basic structure of an AsciiDoc document</simpara>
</listitem>
<listitem>
<simpara>How to create your first AsciiDoc document</simpara>
</listitem>
<listitem>
<simpara>How to add other structural elements such as lists, block quotes and source code</simpara>
</listitem>
<listitem>
<simpara>How to convert an AsciiDoc document to HTML, DocBook and PDF</simpara>
</listitem>
</itemizedlist>
<simpara>In addition to covering the AsciiDoc basics, this guide also suggests a set of conventions to help you create more consistent documents and maximize your writing productivity.</simpara>
<simpara>Let&#8217;s dive in to AsciiDoc!</simpara>
<section xml:id="writing-in-asciidoc">
<title>Writing in AsciiDoc</title>
<simpara>The goal of this section is to teach you how to compose your first AsciiDoc document.
Hopefully, when you look back, you&#8217;ll agree it just makes sense.</simpara>
<simpara>Your adventure with AsciiDoc begins in your favorite text editor.</simpara>
<section xml:id="its-just-text-mate">
<title>It&#8217;s just text, mate.</title>
<simpara>Since AsciiDoc syntax is just <emphasis>plain text</emphasis>, you can write an AsciiDoc document using <emphasis>any</emphasis> text editor.
You don&#8217;t need complex word processing programs like Microsoft Word, OpenOffice Writer or Google Docs.
In fact, you <emphasis>shouldn&#8217;t</emphasis> use these programs because they add cruft to your document (that you can&#8217;t see) and makes conversion tedious.</simpara>
<tip>
<simpara>While it&#8217;s true any text editor will do, I recommend selecting an editor that supports syntax highlighting for AsciiDoc.
The <emphasis role="strong"><phrase role="red">c</phrase><phrase role="green">o</phrase><phrase role="purple">l</phrase><phrase role="fuchsia">o</phrase><phrase role="blue">r</phrase></emphasis> brings contrast to the text, making it easier to read.
The highlighting also confirms when you&#8217;ve entered the correct syntax for an inline or block element.</simpara>
</tip>
<simpara>The most popular application for editing plain text on macOS is <emphasis role="strong">TextMate</emphasis>.
A similar choice on Linux is <emphasis role="strong">GEdit</emphasis>.
On Windows, stay away from Notepad and Wordpad because they produce plain text which is not cross-platform friendly.
Opt instead for a competent text editor like <emphasis role="strong">Notepad++</emphasis>.
If you&#8217;re a programmer (or a writer with an inner geek), you&#8217;ll likely prefer <emphasis role="strong">Vim</emphasis>, <emphasis role="strong">Emacs</emphasis>, or <emphasis role="strong">Sublime Text</emphasis>, all of which are available cross-platform.
The key feature all these editors share is syntax highlighting for AsciiDoc.</simpara>
<tip>
<simpara>Previewing the output of the document while editing can be helpful.
To learn how to setup instant preview, check out the <link xl:href="https://asciidoctor.org/docs/editing-asciidoc-with-live-preview/">Editing AsciiDoc with Live Preview</link> tutorial.</simpara>
</tip>
<simpara>Open up your favorite text editor and get ready to write some AsciiDoc!</simpara>
</section>
<section xml:id="content-is-king">
<title>Content is king!</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/para.adoc[]</simpara>
<simpara>Just like that, <emphasis role="strong">you&#8217;re writing in AsciiDoc!</emphasis>
As you can see, it&#8217;s just like writing an e-mail.</simpara>
<simpara>Save the file with a file extension of <literal>.adoc</literal>.</simpara>
<tip>
<simpara>If you want to find out how to convert the document to HTML, DocBook or PDF, skip ahead to the section on <xref linkend="converting-your-document"/>.</simpara>
</tip>
<section xml:id="wrapped-text-and-hard-line-breaks">
<title>Wrapped text and hard line breaks</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/para-line-break.adoc[]</simpara>
</section>
</section>
<section xml:id="admonitions">
<title>Admonitions</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/admonition.adoc[tag=intro]</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/admonition.adoc[tag=icon]</simpara>
<simpara>An admonition paragraph is rendered in a callout box with the admonition label&#8212;&#8203;or its corresponding icon&#8212;&#8203;in the gutter.
Icons are enabled by setting the <literal>icons</literal> attribute on the document.</simpara>
<note>
<simpara>Admonitions can also encapsulate any block content, which we&#8217;ll cover later.</simpara>
</note>
<simpara>All words and no emphasis makes the document monotonous.
Let&#8217;s give our paragraphs some <emphasis role="strong"><phrase role="big"><emphasis>emotion</emphasis></phrase></emphasis>.</simpara>
</section>
<section xml:id="mild-punctuation-strong-impact">
<title>Mild punctuation, strong impact</title>
<simpara>Just as we emphasize certain words and phrases when we speak, we can emphasize them in text by surrounding them with punctuation.
AsciiDoc refers to this markup as <emphasis>quoted text</emphasis>.</simpara>
<section xml:id="quoted-text">
<title>Quoted text</title>
<simpara>For instance, in an e-mail, you might <quote>speak</quote> a word louder by enclosing it in asterisks.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">I can't believe it, we *won*!</programlisting>
<simpara>As you would expect, the asterisks make the text <emphasis role="strong">won</emphasis> bold.
You can almost sense the emotion.
This is one example of quoted (i.e., formatted) text.</simpara>
<note>
<simpara>The term <quote>quote</quote> is used liberally here to apply to any symbols that surround text in order to apply emphasis or special meaning.</simpara>
</note>
<simpara>Here are the forms of quoted text that AsciiDoc recognizes:</simpara>
<formalpara>
<title>Bold, italic, and monospace formatting syntax</title>
<para>
<programlisting language="asciidoc" linenumbering="unnumbered">Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/ex-text.adoc[tag=b-bold-italic-mono]</programlisting>
</para>
</formalpara>
<simpara>When you want to quote text (e.g., place emphasis) somewhere other than at the boundaries of a word, you need to double up the punctuation.</simpara>
<example>
<title>Result: Bold, italic, and monospace text</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/ex-text.adoc[tag=b-bold-italic-mono]</simpara>
</example>
<simpara>Any quoted text can be prefixed with an attribute list.
The first positional attribute is treated as a role.
The role can be used to apply custom styling to the text.
For instance:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">Type the word [.userinput]#asciidoc# into the search bar.</programlisting>
<simpara>When converting to HTML, the word <quote>asciidoc</quote> is wrapped in <literal>&lt;span&gt;</literal> tags and the role is used as the element&#8217;s CSS class:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;span class="userinput"&gt;asciidoc&lt;/span&gt;</programlisting>
<simpara>You can apply styles to the text using CSS.</simpara>
<simpara>You may not always want these substitutions to take place.
In those cases, you&#8217;ll need to use markup to escape the text.</simpara>
</section>
<section xml:id="preventing-substitution">
<title>Preventing substitution</title>
<simpara>If you are getting quoted text behavior where you don&#8217;t want it, you can use a backslash or a passthrough macro to prevent it.</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/subs-prevent.adoc[tag=backslash]</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/pass-macro.adoc[]</simpara>
<formalpara>
<title>Single plus enclosure</title>
<para>To exclude a phrase from substitutions, enclose it in plus signs (<literal>+</literal>).</para>
</formalpara>
<programlisting language="asciidoc" linenumbering="unnumbered">This +*literal*+ will appear as *literal*.</programlisting>
</section>
<section xml:id="replacements">
<title>Replacements</title>
<simpara>AsciiDoc also recognizes textual representations of symbols, arrows and dashes.</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/subs-symbol-repl.adoc[]</simpara>
<simpara>This mild punctuation does not take away from the readability of the text.
In fact, you could argue that it makes the text easier to read.
What&#8217;s important is that these are conventions with which you are likely already familiar.</simpara>
<simpara>Punctuation is used in AsciiDoc to create another very common type of element in documents, <emphasis>lists!</emphasis></simpara>
</section>
</section>
<section xml:id="lists-lists-lists">
<title>Lists, lists, lists</title>
<simpara>There are three types of lists supported in AsciiDoc:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Unordered</simpara>
</listitem>
<listitem>
<simpara>Ordered</simpara>
</listitem>
<listitem>
<simpara>Description</simpara>
</listitem>
</orderedlist>
<simpara>Unordered and ordered lists are structurally very similar.
They consist of items that are prefixed by different types of markers (i.e., bullet).
In contrast, description lists&#8212;&#8203;also called variable, labeled, or term-definition lists&#8212;&#8203;are collections of terms that each have their own supporting content.
Unlike unordered and ordered lists, description lists are rarely nested, though they often contain the former.</simpara>
<simpara>Let&#8217;s explore each type of list, then mix them together.
We&#8217;ll also look at how to put complex content inside a list item.</simpara>
<section xml:id="lists-of-things">
<title>Lists of things</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/ulist.adoc[]</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/ulist-nested.adoc[]</simpara>
</section>
<section xml:id="ordering-the-things">
<title>Ordering the things</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/o-list.adoc[]</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/o-list-nest.adoc[tag=basic]</simpara>
<simpara>The following table shows the numbering scheme used by default for each nesting level.</simpara>
<table frame="all" rowsep="1" colsep="1">
<title>Ordered list numbering scheme by level</title>
<tgroup cols="4">
<colspec colname="col_1" colwidth="16.6666*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="33.3334*"/>
<thead>
<row>
<entry align="center" valign="top">Level</entry>
<entry align="left" valign="top">Numbering Scheme</entry>
<entry align="left" valign="top">Examples</entry>
<entry align="left" valign="top">CSS class (HTML converter)</entry>
</row>
</thead>
<tbody>
<row>
<entry align="center" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"><simpara>Arabic</simpara></entry>
<entry align="left" valign="top"><simpara>1. 2. 3.</simpara></entry>
<entry align="left" valign="top"><simpara>arabic</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>Lower Alpha</simpara></entry>
<entry align="left" valign="top"><simpara>a. b. c.</simpara></entry>
<entry align="left" valign="top"><simpara>loweralpha</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>Lower Roman</simpara></entry>
<entry align="left" valign="top"><simpara>i. ii. iii.</simpara></entry>
<entry align="left" valign="top"><simpara>lowerroman</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>Upper Alpha</simpara></entry>
<entry align="left" valign="top"><simpara>A. B. C.</simpara></entry>
<entry align="left" valign="top"><simpara>upperalpha</simpara></entry>
</row>
<row>
<entry align="center" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>Upper Roman</simpara></entry>
<entry align="left" valign="top"><simpara>I. II. III.</simpara></entry>
<entry align="left" valign="top"><simpara>upperroman</simpara></entry>
</row>
</tbody>
</tgroup>
</table>
<simpara>You can override the number scheme for any level by setting its style (the first positional entry in a block attribute list).
You can also set the starting number using the <literal>start</literal> attribute:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[lowerroman, start=5]
. Five
. Six
[loweralpha]
.. a
.. b
.. c
. Seven</programlisting>
</section>
<section xml:id="description-lists">
<title>Description lists</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/dlist.adoc[tag=description]</simpara>
</section>
<section xml:id="hybrid-lists">
<title>Hybrid lists</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/dlist.adoc[tag=hybrid]</simpara>
</section>
<section xml:id="complex-list-content">
<title>Complex list content</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/ulist-complex.adoc[]</simpara>
</section>
</section>
<section xml:id="links-and-images">
<title>Links and images</title>
<simpara>AsciiDoc makes it easy to include links, images and other types of media in a document.</simpara>
<section xml:id="external-links">
<title>External links</title>
<simpara>There&#8217;s nothing you have to do to make a link to a URL.
Just include the URL in the document and AsciiDoc will turn it into a link.</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/url.adoc[tag=basic]</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/url.adoc[tag=link]</simpara>
</section>
<section xml:id="target-window-and-role-attributes-for-links">
<title>Target window and role attributes for links</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/url.adoc[tag=attr]</simpara>
</section>
<section xml:id="links-to-relative-files">
<title>Links to relative files</title>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/url-relative.adoc[]</simpara>
<simpara>For links to relative AsciiDoc documents cross references should be used.</simpara>
</section>
<section xml:id="cross-references" xreflabel="Internal Cross References">
<title>Cross references</title>
<simpara>A link to another location within an AsciiDoc document or between AsciiDoc documents is called a <emphasis>cross reference</emphasis> (also referred to as an <emphasis>xref</emphasis>).</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/xref.adoc[]</simpara>
<simpara>Unresolved directive in asciidoc-writers-guide.adoc - include::_includes/xref-relative.adoc[]</simpara>
<simpara>In the link that is created from the inter-document cross reference, the source file extension is replaced with the value of the <literal>outfilesuffix</literal> attribute.
To customize the file extension used in the target of the link, simply change the value of this attribute.</simpara>
<simpara>Image references are similar to links since they are also references to URLs or files.
The difference, of course, is that they display the image in the document.</simpara>
</section>
<section xml:id="images">
<title>Images</title>
<simpara>To include an image on its own line (i.e., a <emphasis>block image</emphasis>), use the <literal>image::</literal> prefix in front of the file name and square brackets after it:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">image::sunset.jpg[]</programlisting>
<simpara>If you want to specify alt text, include it inside the square brackets:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">image::sunset.jpg[Sunset]</programlisting>
<simpara>You can also give the image an id, a title (i.e., caption), set its dimensions (i.e., width and height) and make it a link:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[#img-sunset]
.A mountain sunset
[link=https://www.flickr.com/photos/javh/5448336655]
image::sunset.jpg[Sunset,300,200]</programlisting>
<simpara>The title of a block image is displayed underneath the image when rendered.
Here&#8217;s a preview:</simpara>
<example>
<title>A hyperlinked image with caption</title>
<figure xml:id="img-sunset">
<title>A mountain sunset</title>
<mediaobject>
<imageobject>
<imagedata fileref="../images/sunset.jpg" contentwidth="300" contentdepth="200"/>
</imageobject>
<textobject><phrase>Sunset</phrase></textobject>
</mediaobject>
</figure>
</example>
<important>
<simpara>Images are resolved relative to the value of the <literal>imagesdir</literal> document attribute, which defaults to an empty value.
The <literal>imagesdir</literal> attribute can be an absolute path, relative path or base URL.
If the image target is a URL or an absolute path, the <literal>imagesdir</literal> prefix is <emphasis>not</emphasis> added.</simpara>
</important>
<tip>
<simpara>You should use the <literal>imagesdir</literal> attribute to avoid hard coding the shared path to your images in every image macro.</simpara>
</tip>
<simpara>If you want to include an image inline, use the <literal>image:</literal> prefix instead (notice there is only one colon):</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">Press the image:save.png[Save, title="Save"] button.</programlisting>
<simpara>For inline images, the optional title is displayed as a tooltip.</simpara>
<simpara>You can also include other types of media, such as audio and video.
Consult the <link xl:href="http://asciidoc.org/userguide.html#X98">block audio and video macros</link> section of the AsciiDoc User Guide for details.</simpara>
<simpara>If paragraphs and lists are the meat of the document, then titles and sections are its bones.
Let&#8217;s explore how to give structure to our document.</simpara>
</section>
</section>
<section xml:id="titles-titles-titles">
<title>Titles, titles, titles</title>
<simpara>AsciiDoc supports three types of titles:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Document title</simpara>
</listitem>
<listitem>
<simpara>Section title</simpara>
</listitem>
<listitem>
<simpara>Block title</simpara>
</listitem>
</orderedlist>
<simpara>All titles are optional in AsciiDoc.
This section will define each title type and explain how and when to use them.</simpara>
<section xml:id="document-title">
<title>Document title</title>
<simpara>Just as every e-mail has a subject, every document (typically) has a title.
The title goes at the top of an AsciiDoc document.</simpara>
<tip>
<simpara>A document title is an <emphasis>optional</emphasis> feature of an AsciiDoc document.</simpara>
</tip>
<simpara>To create a document title, begin the first line of the document with one equal sign followed by at least one space (<literal>= </literal>), then the text of the title.
This syntax is the simplest (and thus recommended) way to declare a document title.</simpara>
<simpara>Here&#8217;s an example of a document title followed by an abbreviated paragraph:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= Lightweight Markup Languages

According to Wikipedia...</programlisting>
<simpara>The document title is part of the document header.
So what else can go in the header?
Good question.</simpara>
<section xml:id="the-document-header">
<title>The document header</title>
<simpara>Notice the blank line between the title line and the first line of content in the previous example.
This blank line separates the document header from the document body (in this case a paragraph).
The document title is part of the document header.
In all, the document header contains the title, author, revision information and document-wide attributes.</simpara>
<caution>
<simpara>If the title line is not offset by a blank line, it gets interpreted as a section title, which we&#8217;ll discuss later.</simpara>
</caution>
<simpara>Your document now has a title, but what about an author?
Just as every e-mail has a sender, every document must surely have an author.
Let&#8217;s see how to add additional information to the header, including an author.</simpara>
<simpara>There are two optional lines of text you can add immediately below the document title for defining common document attributes:</simpara>
<variablelist>
<varlistentry>
<term>Line 1</term>
<listitem>
<simpara>Author name and an optional e-mail address</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Line 2</term>
<listitem>
<simpara>An optional revision, a date and an optional remark</simpara>
</listitem>
</varlistentry>
</variablelist>
<simpara>Let&#8217;s add these lines to our document:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= Lightweight Markup Languages
Doc Writer &lt;doc.writer@asciidoc.org&gt;
v1.0, 2012-01-01

According to Wikipedia...</programlisting>
<simpara>The header now contains a document title, an author, a revision number, and a date.
This information will typically be displayed as a formatted header at the top of the output document.</simpara>
<note>
<simpara>The header, including the document title, is <emphasis>not required</emphasis>.
If absent, the AsciiDoc processor will happily convert whatever content is present.
The header is only used when generating a full document.
It&#8217;s excluded from the output of an embedded document.</simpara>
</note>
<simpara>The document header can also be used to define attributes.</simpara>
</section>
</section>
<section xml:id="document-attributes">
<title>Document attributes</title>
<simpara>Attributes are one of the features that sets AsciiDoc apart from other lightweight markup languages.
You can use attributes to toggle features or to store reusable or replacement content.</simpara>
<simpara>Most often, attributes are defined in the document header.
There are scenarios where they can be defined inline, but we&#8217;ll focus on the more common usage.</simpara>
<simpara>An attribute entry consists of a name surrounded by colons at the beginning of the line followed by at least one space, then the content.
The content is optional.</simpara>
<simpara>Here&#8217;s an example of an attribute that holds the version of an application:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= User Guide
Doc Writer &lt;doc.writer@asciidoc.org&gt;
2012-01-01
:appversion: 1.0.0</programlisting>
<important>
<simpara>There should be no blank lines between the first attribute entry and the rest of the header.</simpara>
</important>
<simpara>Now you can refer to this attribute anywhere in the document (where attribute substitution is performed) by surrounding the name in curly braces:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">The current version of the application is {appversion}.</programlisting>
<simpara>Attributes are also commonly used to store URLs, which can get quite lengthy.
Here&#8217;s an example:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:fedpkg: https://apps.fedoraproject.org/packages/rubygem-asciidoctor</programlisting>
<simpara>Here&#8217;s the attribute in use:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">Information about the Asciidoctor package for Fedora can found at {fedpkg}.</programlisting>
<simpara>Document attributes can also be used to toggle settings or set configuration variables that control the output generated by the AsciiDoc processor.</simpara>
<simpara>For example, to include a table of contents in your document, you can define the <literal>toc</literal> attribute:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:toc:</programlisting>
<simpara>To undefine an attribute, place a <literal>!</literal> at the end of the name:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:linkcss!:</programlisting>
<simpara>You can also set the base path to images (default: <emphasis>empty</emphasis>), icons (default: <literal>./images/icons</literal>), stylesheets (default: <literal>./stylesheets</literal>) and JavaScript files (default: <literal>./javascripts</literal>):</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:imagesdir: ./images
:iconsdir: ./icons
:stylesdir: ./styles
:scriptsdir: ./js</programlisting>
<tip>
<simpara>Attribute values can also be set and overridden when invoking the AsciiDoc processor.
We&#8217;ll explore that feature later.</simpara>
</tip>
<simpara>When you find yourself typing the same text repeatedly, or text that often needs to be updated, consider assigning it to a document attribute and use that instead.</simpara>
<simpara>As your document grows, you&#8217;ll want to break the content into sections, like in this guide.
That&#8217;s accomplished using section titles.</simpara>
</section>
<section xml:id="section-titles">
<title>Section titles</title>
<simpara>Sections partition the document into a content hierarchy.
In AsciiDoc, sections are defined using section titles.</simpara>
<simpara>A section title uses the same syntax as a document title, except the line may begin with two to six equal signs instead of just a single equal sign.
The number of equal signs represents the nesting level (using a 0-based index).</simpara>
<simpara>Here are all the section levels permitted in an AsciiDoc document (for an article doctype, the default), shown below the document title:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= Document Title (Level 0)

== Level 1 Section

=== Level 2 Section

==== Level 3 Section

===== Level 4 Section

====== Level 5 Section

== Another Level 1 Section</programlisting>
<note>
<simpara>When the document is converted to HTML 5 (using the built-in <literal>html5</literal> backend), each section title becomes a heading element where the heading level matches the number of equal signs.
For example, a level 1 section (2 equal signs) maps to an <literal>&lt;h2&gt;</literal> element.</simpara>
</note>
<simpara>Section levels cannot be chosen arbitrarily.
There are two rules you must follow:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>A document can only have multiple level 0 sections if the <literal>doctype</literal> is set to <literal>book</literal>.<footnote><simpara>The default doctype is <literal>article</literal>, which only allows one level 0 section (i.e., the document title).</simpara></footnote></simpara>
</listitem>
<listitem>
<simpara>Section levels cannot be skipped when nesting sections</simpara>
</listitem>
</orderedlist>
<simpara>For example, the following syntax is illegal:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= Document Title

= Illegal Level 0 Section (violates rule #1)

== First Section

==== Illegal Nested Section (violates rule #2)</programlisting>
<simpara>Content above the first section (after the document title) is part of the preamble.
Once the first section is reached, content is associated with the section that precedes it:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">== First Section

Content of first section

=== Nested Section

Content of nested section

== Second Section

Content of second section</programlisting>
<tip>
<simpara>In addition to the equals marker used for defining single-line section titles, Asciidoctor recognizes the hash symbol (<literal>#</literal>) from Markdown.
That means the outline of a Markdown document will convert just fine as an AsciiDoc document.</simpara>
</tip>
<simpara>To have the processor auto-number the sections, define the <literal>sectnums</literal> attribute in the document header:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:sectnums:</programlisting>
<simpara>You can also use this attribute entry above any section title in the document to toggle the auto-numbering setting.
When you want to turn off the numbering, add an exclamation point to the end of the attribute name:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:sectnums!:

== Unnumbered Section</programlisting>
<section xml:id="preamble">
<title>Preamble</title>
<simpara>Content between the document title and the first section is called the preamble.
If a document title is not present, this content is not wrapped in a preamble section.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">= Document Title

preamble

another preamble paragraph

== First Section</programlisting>
<tip>
<simpara>When using the default Asciidoctor stylesheet, this preamble is rendered in the style of a lead (i.e., larger font).</simpara>
</tip>
<simpara>You can also assign titles to individual elements.</simpara>
</section>
</section>
<section xml:id="block-titles">
<title>Block titles</title>
<simpara>You can assign a title to any paragraph, list or delimited block element.
The title is used as the element&#8217;s caption.
In most cases, the title is displayed immediately above the content.
If the content is a figure or image, the title is displayed below the content.</simpara>
<simpara>A block title is defined on a line above the element.
The line must begin with a dot (<literal>.</literal>) and be followed immediately by the title text with no spaces in between.</simpara>
<simpara>Here&#8217;s an example of a list with a title:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">.TODO list
- Learn the AsciiDoc syntax
- Install AsciiDoc
- Write my document in AsciiDoc</programlisting>
<simpara>Speaking of block titles, let&#8217;s dig into blocks and discover which types of blocks AsciiDoc supports.</simpara>
</section>
</section>
</section>
<section xml:id="building-blocks-in-asciidoc">
<title>Building blocks in AsciiDoc</title>
<simpara>AsciiDoc provides a nice set of components for including non-paragraph text&#8212;&#8203;such as block quotes, source code listings, sidebars and tables&#8212;&#8203;in your document.
These components are referred to as <emphasis>delimited blocks</emphasis> because they are surrounded by delimiter lines.</simpara>
<section xml:id="delimited-blocks">
<title>Delimited blocks</title>
<simpara>You&#8217;ve already seen many examples of the listing block (i.e., code block), which is surrounded by lines with four or more hyphens.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">----
This is an example of a _listing block_.
The content inside is displayed as &lt;pre&gt; text.
----</programlisting>
<simpara>Within the boundaries of a delimited block, you can enter any content or blank lines.
The block doesn&#8217;t end until the ending delimiter is found.
The delimiters around the block determine the type of block, how the content is processed and converted and what elements are used to wrap the content in the output.</simpara>
<simpara>Here&#8217;s how the block above appears when converted to HTML and viewed in a browser:</simpara>
<literallayout class="monospaced">This is an example of a _listing block_.
The content inside is displayed as &lt;pre&gt; text.</literallayout>
<simpara>Here&#8217;s the HTML source that is generated:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;div class="listingblock"&gt;
  &lt;div class="content monospaced"&gt;
    &lt;pre&gt;This is an example of a _listing block_.
The content inside is displayed as &amp;lt;pre&amp;gt; text.&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;</programlisting>
<simpara>You should notice a few things about how the content is processed:</simpara>
<itemizedlist>
<listitem>
<simpara>the HTML tag <literal>&lt;pre&gt;</literal> is escaped</simpara>
</listitem>
<listitem>
<simpara>the endlines are preserved</simpara>
</listitem>
<listitem>
<simpara>the phrase <quote>listing block</quote> is not italicized, despite having underscores around it.</simpara>
</listitem>
</itemizedlist>
<simpara>Each type of block is processed according to its purpose.
Literal blocks don&#8217;t receive the full set of substitutions normally applied to a paragraph.
Since a listing block is typically used for source code, substitutions are not desirable.</simpara>
<simpara>The following table identifies the delimited blocks that AsciiDoc provides by default, their purpose and what substitutions are performed on its content.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Name (Style)</entry>
<entry align="left" valign="top">Line delimiter</entry>
<entry align="left" valign="top">Purpose</entry>
<entry align="left" valign="top">Substitutions</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>comment</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">////</literallayout></entry>
<entry align="left" valign="top"><simpara>Private notes that are not displayed in the output</simpara></entry>
<entry align="left" valign="top"><simpara>none</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>example</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">====</literallayout></entry>
<entry align="left" valign="top"><simpara>Designates example content or defines an admonition block</simpara></entry>
<entry align="left" valign="top"><simpara>normal</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>literal</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">....</literallayout></entry>
<entry align="left" valign="top"><simpara>Output text to be displayed exactly as entered</simpara></entry>
<entry align="left" valign="top"><simpara>verbatim</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>listing, source</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">----</literallayout></entry>
<entry align="left" valign="top"><simpara>Source code or keyboard input to be displayed as entered</simpara></entry>
<entry align="left" valign="top"><simpara>verbatim</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>open</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">--</literallayout></entry>
<entry align="left" valign="top"><simpara>Anonymous block that can act as any other block (except <emphasis>pass</emphasis> or <emphasis>table</emphasis>)</simpara></entry>
<entry align="left" valign="top"><simpara>varies</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>pass</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">++++</literallayout></entry>
<entry align="left" valign="top"><simpara>Raw text to be passed through unprocessed</simpara></entry>
<entry align="left" valign="top"><simpara>none</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>quote, verse</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">____</literallayout></entry>
<entry align="left" valign="top"><simpara>A quotation or verse with optional attribution</simpara></entry>
<entry align="left" valign="top"><simpara>normal</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>sidebar</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">****</literallayout></entry>
<entry align="left" valign="top"><simpara>Aside text displayed outside the flow of the document</simpara></entry>
<entry align="left" valign="top"><simpara>normal</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>table</simpara></entry>
<entry align="left" valign="top"><literallayout class="monospaced">|===</literallayout></entry>
<entry align="left" valign="top"><simpara>Used to display tabular content or advanced layouts</simpara></entry>
<entry align="left" valign="top"><simpara>varies</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<important>
<simpara>AsciiDoc allows delimited lines to be longer than 4 characters.
<emphasis role="strong">Don&#8217;t do it.</emphasis>
Maintaining long delimiter lines is a <emphasis>colossal</emphasis> waste of time, not to mention arbitrary and error prone.
Use the minimum line length required to create a delimited block and <emphasis>move on</emphasis> to drafting the content.
The reader will never see the long delimiters anyway since they are not carried over to the output.</simpara>
</important>
<simpara>This table shows the substitutions performed by each substitution group referenced in the previous table.</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="4">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="25*"/>
<colspec colname="col_3" colwidth="25*"/>
<colspec colname="col_4" colwidth="25*"/>
<thead>
<row>
<entry align="left" valign="top">Group / Substitution</entry>
<entry align="left" valign="top">Normal</entry>
<entry align="left" valign="top">Verbatim</entry>
<entry align="left" valign="top">None</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Special chars</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Callouts</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Quotes</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Attributes</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Replacements</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Macros</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Post replacements</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Yes</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
<entry align="left" valign="top"><simpara>No</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>In order to apply normal substitutions to an attribute value, surround it with single quotes.
There are two exceptions to this behavior: At the moment normal substitutions are not applied to
the <literal>options</literal> and <literal>title</literal> attribute values.</simpara>
<simpara>You can control how blocks are displayed using block metadata.</simpara>
</section>
<section xml:id="block-metadata">
<title>Block metadata</title>
<simpara>Metadata can be assigned to any block.
There are several types of metadata:</simpara>
<itemizedlist>
<listitem>
<simpara>Title</simpara>
</listitem>
<listitem>
<simpara>Id (i.e., anchor)</simpara>
</listitem>
<listitem>
<simpara>Style (first unnamed block attribute)</simpara>
</listitem>
<listitem>
<simpara>Named block attributes</simpara>
</listitem>
</itemizedlist>
<simpara>Here&#8217;s an example of a quote block that includes all types of metadata:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">.Gettysburg Address
[[gettysburg]]
[quote, Abraham Lincoln, Address delivered at the dedication of the Cemetery at Gettysburg]
____
Four score and seven years ago our fathers brought forth
on this continent a new nation...

Now we are engaged in a great civil war, testing whether
that nation, or any nation so conceived and so dedicated,
can long endure. ...
____</programlisting>
<simpara>Here&#8217;s the metadata extracted from this block:</simpara>
<variablelist>
<varlistentry>
<term>Title</term>
<listitem>
<simpara>Gettysburg Address</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Id</term>
<listitem>
<simpara>gettysburg</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Style</term>
<listitem>
<simpara>quote</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>Named block attributes</term>
<listitem>
<variablelist>
<varlistentry>
<term>attribution</term>
<listitem>
<simpara>Abraham Lincoln</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>citetitle</term>
<listitem>
<simpara>Address delivered at the dedication of the Cemetery at Gettysburg</simpara>
</listitem>
</varlistentry>
</variablelist>
</listitem>
</varlistentry>
</variablelist>
<tip>
<simpara>A block can have multiple block attribute lines.
The attributes will be aggregated.
If there is a name conflict, the last attribute defined wins.</simpara>
</tip>
<simpara>Some metadata is used as supplementary content, such as the title, whereas other metadata, such as the style, controls how the block is converted.</simpara>
</section>
<section xml:id="masquerading-blocks">
<title>Masquerading blocks</title>
<simpara>Some blocks can masquerade as other blocks, a feature which is controlled by the block style.
The block style is the first positional attribute in the block attribute list.</simpara>
<section xml:id="admonition-blocks">
<title>Admonition blocks</title>
<simpara>For instance, an example block can act as an admonition block:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[NOTE]
====
This is an example of an admonition block.

Unlike an admonition paragraph, it may contain any AsciiDoc content.
The style can be any one of the admonition labels:

* NOTE
* TIP
* WARNING
* CAUTION
* IMPORTANT
====</programlisting>
</section>
<section xml:id="listing-and-source-code-blocks">
<title>Listing and source code blocks</title>
<simpara>At the start of this tutorial, remember how painful we said it is to insert source code into a document using a traditional word processor.
They just aren&#8217;t designed for that use case.
<emphasis role="strong">AsciiDoc is!</emphasis></simpara>
<simpara>In fact, inserting source code in an AsciiDoc is incredibly easy.
Just shove the raw code into a listing block.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">----
require 'asciidoctor'

puts Asciidoctor.convert_file 'mysample.adoc', to_file: false
----</programlisting>
<simpara>To enable syntax highlighting in the output, set the style on the block to <literal>source</literal> and specify the source language in the second attribute position.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[source,ruby]
----
require 'asciidoctor'

puts Asciidoctor.convert_file 'mysample.adoc', to_file: false
----</programlisting>
<simpara>You can even use source code that&#8217;s in a separate file.
Just use the AsciiDoc include directive:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[source,ruby]
----
include::example.rb[]
----</programlisting>
<simpara>To really show how well-suited AsciiDoc is for technical documentation, it also supports callouts in source code.
Code callouts are used to explain lines of source code.
The explanations are specified below the listing and keyed by number.
Here&#8217;s an example:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[source,ruby]
----
require 'asciidoctor'  # &lt;1&gt;

Asciidoctor.convert_file 'mysample.adoc'  # &lt;2&gt;
----
&lt;1&gt; Imports the library
&lt;2&gt; Reads, parses, and converts the file</programlisting>
<simpara>Here&#8217;s how the callouts appear when rendered:</simpara>
<example xml:id="eg-callouts">
<title>Source code with callouts</title>
<programlisting language="ruby" linenumbering="unnumbered">require 'asciidoctor'  <co xml:id="CO1-1"/>

puts Asciidoctor.convert_file 'mysample.adoc'  <co xml:id="CO1-2"/></programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>Imports the library</para>
</callout>
<callout arearefs="CO1-2">
<para>Reads, parses, and converts the file</para>
</callout>
</calloutlist>
</example>
</section>
<section xml:id="open-blocks">
<title>Open blocks</title>
<simpara>The most versatile block of all is the open block.
An open block can act as any other block, with the exception of <emphasis>pass</emphasis> and <emphasis>table</emphasis>.
Here&#8217;s an example of an open block acting as a sidebar:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[sidebar]
.Related information
--
This is aside text.

It is used to present information related to the main content.
--</programlisting>
</section>
<section xml:id="pass-blocks">
<title>Passthrough blocks</title>
<simpara>The <quote>anything goes</quote> mechanism in AsciiDoc is the passthrough block.
As the name implies, this block passes the content of the block directly through to the output document.
When you&#8217;ve encountered a complex requirement that you cannot meet using the AsciiDoc syntax, a passthrough block can come in very handy.</simpara>
<simpara>For example, let&#8217;s say you want to embed a GitHub gist into your document.
You can define the following passthrough block:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">++++
&lt;script src="https://gist.github.com/piscisaureus/3342247.js"&gt;&lt;/script&gt;
++++</programlisting>
<caution>
<simpara>Using a passthrough block couples your content to a specific output format, such as HTML.
If you&#8217;re going to use a passthrough block, we recommend using <link xl:href="https://asciidoctor.org/docs/user-manual#conditional-preprocessor-directives">conditional preprocessor directives</link> to associate the format-specific content with each backend you intend to support.</simpara>
</caution>
</section>
</section>
<section xml:id="delimiters-optional">
<title>Delimiters optional</title>
<simpara>If the content is contiguous (not interrupted by blank lines), you can forgo the use of the block delimiters and instead use the block style above a paragraph to repurpose it as one of the delimited block types.</simpara>
<simpara>This format is often used for single-line listings:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[listing]
sudo dnf install asciidoc</programlisting>
<simpara>or single-line quotes:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[quote]
Never do today what you can put off 'til tomorrow.</programlisting>
<simpara>While most blocks are linear, tables give you the ability to layout content horizontally as well.</simpara>
</section>
<section xml:id="a-new-perspective-on-tables">
<title>A new perspective on tables</title>
<simpara>Tables are one of the most refined areas of the AsciiDoc syntax.
They are easy to create, easy to read in raw form and also remarkably sophisticated.
I recommend that you use tables sparingly because they interrupt the conversation with your readers.
When they are the most suitable way to present the information, know that you&#8217;ve got a powerful tool in your hands.</simpara>
<simpara>You can think of a table as a delimited block that contains one or more bulleted lists.
The list marker is a vertical bar (<literal>|</literal>).
Each list represents one row in the table and must share the same number of items (taking into account any column or row spans).</simpara>
<simpara>Here&#8217;s a simple example of a table with two columns and three rows:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[cols=2*]
|===
|Firefox
|Web Browser

|Ruby
|Programming Language

|TorqueBox
|Application Server
|===</programlisting>
<simpara>The first non-blank line inside the block delimiter (<literal>|===</literal>) determines the number of columns.
Since we are putting each column title on a separate line, we have to use the <literal>cols</literal> block attribute to explicitly state that this table has two columns.
The <literal>*</literal> is the repeat operator.
It means to repeat the column specification for the remainder of columns.
In this case, it means to repeat no special formatting (since none is present) across 2 columns.</simpara>
<simpara>We can make the first row of the table the header by setting the <literal>header</literal> option on the table.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[cols=2*,options=header]
|===
|Name
|Group

|Firefox
|Web Browser

|Ruby
|Programming Language

...
|===</programlisting>
<simpara>You can also define the <literal>header</literal> option using the following shorthand:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[%header,cols=2*]</programlisting>
<simpara>Alternatively, we could define the header row on a single line offset from the body rows by a blank line so neither the <literal>cols</literal> or the <literal>options</literal> attributes are required.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">|===
|Name |Group

|Firefox
|Web Browser

...
|===</programlisting>
<simpara>The content of each item (i.e., cell) can span multiple lines, as is the case with other lists in AsciiDoc.
Unlike other lists, the content of each cell may contain blank lines without the need for a list continuation to hold them together.
A new cell begins when another non-escaped vertical bar (<literal>|</literal>) is encountered.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">|===
|Name |Group |Description

|Firefox
|Web Browser
|Mozilla Firefox is an open-source web browser.
It's designed for standards compliance,
performance, portability.

|Ruby
|Programming Language
|A programmer's best friend.

...
|===</programlisting>
<simpara>You can set the relative widths of each column using <emphasis>column specifiers</emphasis>&#8212;a comma-separated list of relative values defined in the <literal>cols</literal> block attribute.
The number of entries in the list determines the number of columns.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[cols="2,3,5"]
|===
|Name |Group |Description

|Firefox
|Web Browser
|Mozilla Firefox is an open-source web browser.
It's designed for standards compliance,
performance and portability.

|Ruby
|Programming Language
|A programmer's best friend.

...
|===</programlisting>
<simpara>If you want to include blocks or lists inside the contents of a column, you can put an <literal>a</literal> (for AsciiDoc) at the end of the column&#8217;s relative value.</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[cols="2,3,5a"]
|===
|Name |Group |Description

|Firefox
|Web Browser
|Mozilla Firefox is an open-source web browser.
It's designed for:

* standards compliance,
* performance and
* portability.

|Ruby
|Programming Language
|A programmer's best friend.

...
|===</programlisting>
<simpara>Alternatively, you can apply the AsciiDoc style to an individual cell by prefixing the vertical bar with an <literal>a</literal>:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">a|Mozilla Firefox is an open-source web browser.
It's designed for:

* standards compliance,
* performance and
* portability.</programlisting>
<simpara>There&#8217;s a whole collection of column and cell specifiers you can use to format the contents of the table, including styling and alignment.
Consult the <link xl:href="http://asciidoc.org/userguide.html#_tables">Tables</link> chapter of the AsciiDoc User Guide for a full list.</simpara>
<simpara>AsciiDoc tables can also be created directly from CSV data.
Just set the <literal>format</literal> block attribute to <literal>csv</literal> and insert CSV data inside the block delimiters, either directly:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[%header,format=csv]
|===
Artist,Track,Genre
Baauer,Harlem Shake,Hip Hop
The Lumineers,Ho Hey,Folk Rock
|===</programlisting>
<simpara>or using an <literal>include::[]</literal> directive:</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">[%header,format=csv]
|===
include::tracks.csv[]
|===</programlisting>
<simpara>Asciidoctor 0.1.3 also recognizes shorthand notation for setting CSV and DSV table formats.
The first position of the table block delimiter (i.e., <literal>|===</literal>) can be replaced by a data delimiter to set the table format accordingly.</simpara>
<simpara>Instead of specifying the <literal>csv</literal> format using an attribute, you can simply replace the leading pipe (<literal>|</literal>) with a comma (<literal>,</literal>).</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">,===
a,b,c
,===</programlisting>
<simpara>In the same way, the <literal>dsv</literal> format can be specified by replacing the leading pipe (<literal>|</literal>) with a colon (<literal>:</literal>).</simpara>
<programlisting language="asciidoc" linenumbering="unnumbered">:===
a:b:c
:===</programlisting>
<simpara>That&#8217;s a pretty powerful option.</simpara>
</section>
</section>
<section xml:id="what-else-can-asciidoc-do">
<title>What else can AsciiDoc do?</title>
<simpara>We&#8217;ve covered many of the features of the AsciiDoc syntax, but it still has much more depth.
AsciiDoc is simple enough for a README, yet can scale to meet the requirements of a publisher.</simpara>
<simpara>Here are some of the features that the AsciiDoc syntax supports:</simpara>
<itemizedlist>
<listitem>
<simpara>footnotes</simpara>
</listitem>
<listitem>
<simpara>indexes</simpara>
</listitem>
<listitem>
<simpara>appendix, preface, dedication, partintro</simpara>
</listitem>
<listitem>
<simpara>multi-line attributes</simpara>
</listitem>
<listitem>
<simpara>preprocessor directive (conditional markup)</simpara>
</listitem>
<listitem>
<simpara>mathematical formulas</simpara>
</listitem>
<listitem>
<simpara>musical notation</simpara>
</listitem>
<listitem>
<simpara>diagrams</simpara>
</listitem>
<listitem>
<simpara>block filters</simpara>
</listitem>
<listitem>
<simpara>themes</simpara>
</listitem>
<listitem>
<simpara>custom blocks, macros and output formats</simpara>
</listitem>
</itemizedlist>
<simpara>Consult the <link xl:href="https://asciidoctor.org/docs/user-manual">Asciidoctor User Manual</link> to continue exploring the syntax and processor capabilities.</simpara>
<simpara>That&#8217;s enough syntax for now.
You&#8217;ve created your first AsciiDoc document.
Now it&#8217;s time to convert the document into a presentable format.
This will give you a real appreciation for the power that AsciiDoc puts in your hands.</simpara>
</section>
<section xml:id="converting-your-document">
<title>Converting your document</title>
<simpara>While AsciiDoc syntax is designed to be readable in raw form, the intended audience for that format are writers and editors.
Readers aren&#8217;t going to appreciate the raw text nearly as much.
Aesthetics matter.
You&#8217;ll want to apply nice typography with font sizes that adhere to the <quote>golden ratio</quote>, colors, icons and images to give it the respect it deserves.
That&#8217;s where the Asciidoctor processor comes in (<emphasis role="strong">after</emphasis> you have done the writing).</simpara>
<simpara>The Asciidoctor processor parses the document and translates it into a backend format, such as HTML, ePub, DocBook or PDF.
Asciidoctor ships with a set of default templates in the tin, but you can customize the templates or create your own to get exactly the output you want.</simpara>
<simpara>Before you can use the Asciidoctor processor, you have to install the <link xl:href="https://rubygems.org/gems/asciidoctor">Asciidoctor Ruby Gem</link>.
Review the <link xl:href="https://asciidoctor.org/docs/install-toolchain/">Asciidoctor Installation Guide</link> if you need helping installing the gem.</simpara>
<section xml:id="converting-a-document-to-html-5">
<title>Converting a document to HTML 5</title>
<simpara>Asciidoctor provides both a command line tool and a Ruby API for converting AsciiDoc documents to HTML 5, Docbook 5.0 and custom output formats.</simpara>
<simpara>To use Asciidoctor to generate an HTML document, type <literal>asciidoctor</literal> followed by your document&#8217;s name on the command line.</simpara>
<literallayout class="monospaced">$ asciidoctor mysample.adoc</literallayout>
<simpara>In Asciidoctor, the <emphasis role="strong">html5</emphasis> backend is the default, so there&#8217;s no need to specify a backend explicitly to generate an HTML 5 document.</simpara>
<simpara>Asciidoctor also provides a Ruby API, so you can generate an HTML document directly from a Ruby application:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">require 'asciidoctor'

Asciidoctor.convert_file 'mysample.adoc'</programlisting>
<simpara>Alternatively, you can capture the HTML output into a variable instead of writing it to a file:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">html = Asciidoctor.convert_file 'mysample.adoc', to_file: false, header_footer: true
puts html</programlisting>
<simpara>To generate DocBook, just specify the backend option:</simpara>
<programlisting language="ruby" linenumbering="unnumbered">Asciidoctor.convert_file 'mysample.adoc', backend: 'docbook'</programlisting>
<simpara>One of the strengths of Asciidoctor is that it can output to a variety of formats, not just HTML.</simpara>
</section>
<section xml:id="converting-a-document-to-docbook">
<title>Converting a document to DocBook</title>
<simpara>Despite the fact that writing in DocBook is inhumane, it&#8217;s useful as a portable document format.
Since AsciiDoc syntax was designed with DocBook output in mind, the conversion is very good.
There&#8217;s a corresponding DocBook element for each markup in the AsciiDoc syntax.</simpara>
<simpara>Asciidoctor provides a Docbook 5.0 backend out of the box.
To convert the document to Docbook 5.0, call the processor with the backend flag set to <literal>docbook5</literal>:</simpara>
<literallayout class="monospaced">$ asciidoctor -b docbook5 mysample.adoc</literallayout>
<simpara>A new XML document, named <literal>mysample.xml</literal>, will now be present in the current directory:</simpara>
<literallayout class="monospaced">$ ls -1
mysample.adoc
mysample.html
mysample.xml</literallayout>
<simpara>If you&#8217;re on Linux, you can view the DocBook file using Yelp:</simpara>
<literallayout class="monospaced">$ yelp mysample.xml</literallayout>
<simpara>DocBook is only an intermediary format in the Asciidoctor toolchain.
You&#8217;ll either feed it into a system that processes DocBook (like <link xl:href="https://fedorahosted.org/publican">publican</link>), or you can convert it to PDF using the <link xl:href="https://github.com/asciidoctor/asciidoctor-fopub/blob/master/README.adoc">asciidoctor-fopub tool</link>.</simpara>
</section>
<section xml:id="output-galore">
<title>Output galore</title>
<simpara>There&#8217;s really no end to the customization you can do to the output the Asciidoctor processor generates.
We&#8217;ve just scratched the surface here.</simpara>
<simpara>Check out the <link xl:href="https://asciidoctor.org/docs/user-manual">Asciidoctor User Manual</link> and the <link xl:href="https://asciidoctor.org/docs">Asciidoctor Docs Page</link> to learn more.</simpara>
</section>
<section xml:id="where-else-is-asciidoc-supported">
<title>Where else is AsciiDoc supported?</title>
<simpara>The easiest way to experiment with AsciiDoc is online.
AsciiDoc document in a GitHub repository or a <link xl:href="https://gist.github.com">gist</link> is automatically converted to HTML and rendered in the web interface.</simpara>
<simpara>If you have a project on GitHub, you can write the README or any other documentation in AsciiDoc and the GitHub interface will show the HTML output for visitors to view.</simpara>
<simpara>Gists, in particular, are a great way to experiment with AsciiDoc.
Just create a new gist, name the file with the extension <literal>.adoc</literal> and enter AsciiDoc markup.
You can save the document as public or secret.
If you want to try AsciiDoc without installing any software, a gist is a great way to get started.</simpara>
<simpara>While there&#8217;s plenty more of the AsciiDoc syntax and toolchain to explore, you know more than enough about it to write a range of documentation, from a simple README to a comprehensive user guide.</simpara>
</section>
</section>
<section xml:id="wrap-up">
<title>Wrap-up</title>
<simpara>Writing in AsciiDoc should be no more complex than writing an e-mail.
All you need to compose a document in AsciiDoc is open a text editor and type regular paragraphs.
Only when you need additional semantics or formatting do you need to introduce markup.
Let your instinct guide you when you need to remember what punctuation to use.
The AsciiDoc syntax is based on time-tested plain-text conventions from the last several decades of computing.
Hopefully you agree that the markup does not detract from the readability of the text in raw form, as that&#8217;s a key goal of lightweight markup languages like AsciiDoc.</simpara>
<simpara>As humans, communication is what connects us through the ages and allows us to pass on knowledge.
AsciiDoc enables you to focus on communicating rather than distracting you with other stuff that just gets in the way.
Copy the text of an e-mail into a document and see how easy it to repurpose it as documentation.
Almost immediately, you&#8217;ll find your writing zen and enjoy the rewarding experience of producing.</simpara>
</section>
<glossary xml:id="glossary">
<title>Glossary</title>
<glossentry>
<glossterm>admonition paragraph</glossterm>
<glossdef>
<simpara>a callout paragraph that has a label or icon indicating its priority</simpara>
</glossdef>
</glossentry>
<glossentry>
<glossterm>admonition block</glossterm>
<glossdef>
<simpara>a callout block containing complex content that has a label or icon indicating its priority</simpara>
</glossdef>
</glossentry>
<glossentry>
<glossterm>backend</glossterm>
<glossdef>
<simpara>a set of templates for converting AsciiDoc source to different output format</simpara>
</glossdef>
</glossentry>
<glossentry>
<glossterm>cross reference</glossterm>
<glossdef>
<simpara>a link from one location in the document to another location marked by an anchor</simpara>
</glossdef>
</glossentry>
<glossentry>
<glossterm>list continuation</glossterm>
<glossdef>
<simpara>a plus sign (<literal>+</literal>) on a line by itself that connects adjacent lines of text to a list item</simpara>
</glossdef>
</glossentry>
<glossentry>
<glossterm>quoted text</glossterm>
<glossdef>
<simpara>text which is enclosed in special punctuation to give it emphasis or special meaning</simpara>
</glossdef>
</glossentry>
</glossary>
</article>